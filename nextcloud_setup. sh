#!/usr/bin/env bash
set -euo pipefail

# Request sudo permission upfront.
sudo -v

# Export PROMPT_START to avoid unbound variable errors.
export PROMPT_START=""

########################################
# ANSI Colors for Output
########################################
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
RESET=$(tput sgr0)

########################################
# Log Output
########################################
exec > >(tee /tmp/nextcloud_setup_summary.txt) 2>&1
clear

# Detect server IP (first IP from hostname -I)
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "${GREEN}Detected Server IP: ${SERVER_IP}${RESET}"
echo

echo "${GREEN}Starting Nextcloud Setup...${RESET}"
echo

########################################
# Restore Nextcloud Backup if Available
########################################
if [ ! -d "./nextcloud/html" ]; then
    echo "${YELLOW}No Nextcloud data directory found. Checking for backups...${RESET}"
    found_backup=false
    for b in backup_[0-9][0-9][0-9][0-9][0-9][0-9]; do
        if [ -d "$b" ]; then
            echo "${YELLOW}Restoring backup directory '$b' to ./nextcloud/html...${RESET}"
            mv "$b" "./nextcloud/html"
            found_backup=true
            break
        fi
    done
    if [ "$found_backup" = false ]; then
        echo "${YELLOW}No backup found. Proceeding with a fresh installation.${RESET}"
    fi
fi
echo

########################################
# Nextcloud Deployment via Docker Compose
########################################
if ! docker ps -a --filter=name=nextcloud_server | grep -q nextcloud_server; then
    echo "${YELLOW}Deploying Nextcloud using Docker Compose...${RESET}"
    mkdir -p ~/nextcloud && cd ~/nextcloud || exit 1
    cat > docker-compose.yml <<'EOF'
version: '3.7'

services:
  nextcloud:
    container_name: nextcloud_server
    image: nextcloud:latest
    restart: always
    ports:
      - 8080:80
    volumes:
      - nextcloud_data:/var/www/html
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=nextcloud_password
    depends_on:
      - db

  db:
    container_name: nextcloud_db
    image: mariadb:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD=nextcloud_root_password
      MYSQL_DATABASE=nextcloud
      MYSQL_USER=nextcloud
      MYSQL_PASSWORD=nextcloud_password
    volumes:
      - nextcloud_db:/var/lib/mysql

volumes:
  nextcloud_data:
  nextcloud_db:
EOF
    echo "${YELLOW}Starting Nextcloud container...${RESET}"
    docker compose up -d || { echo "${RED}docker compose up failed. Exiting.${RESET}"; exit 1; }
    echo "${GREEN}Nextcloud deployed successfully.${RESET}"
else
    echo "${GREEN}Nextcloud container already exists; skipping deployment.${RESET}"
fi
echo

########################################
# Simple Health Check for Nextcloud Container
########################################
echo "${YELLOW}Waiting for Nextcloud container to start...${RESET}"
max_attempts=6
running=false
for i in $(seq 1 $max_attempts); do
    status=$(docker inspect --format="{{.State.Status}}" nextcloud_server 2>/dev/null || echo "unknown")
    if [ "$status" = "running" ]; then
        running=true
        break
    fi
    sleep 5
done
if [ "$running" = false ]; then
    echo "${RED}Warning: Nextcloud container did not start within 30 seconds.${RESET}"
else
    echo "${GREEN}Nextcloud container is running.${RESET}"
fi
echo

########################################
# Ensure Firewalld is Installed, Enabled, and Running
########################################
if ! command -v firewall-cmd >/dev/null 2>&1; then
    echo "${YELLOW}Firewalld not found. Installing firewalld...${RESET}"
    sudo dnf install -y firewalld
fi
if ! systemctl is-enabled --quiet firewalld; then
    echo "${YELLOW}Firewalld is not enabled. Enabling and starting firewalld...${RESET}"
    sudo systemctl enable firewalld
    sudo systemctl start firewalld
elif ! systemctl is-active --quiet firewalld; then
    echo "${YELLOW}Firewalld is installed but not running. Starting firewalld...${RESET}"
    sudo systemctl start firewalld
fi

########################################
# Delay Before Network Check
########################################
echo "${YELLOW}Waiting 10 seconds before network accessibility check...${RESET}"
sleep 10

########################################
# Advanced Network Accessibility Check
########################################
echo "${YELLOW}Checking network accessibility on port 8080...${RESET}"
HTTP_CODE=$(curl -s -o /dev/null -w '%{http_code}' --connect-timeout 5 http://localhost:8080)
if [ "$HTTP_CODE" -eq 200 ]; then
    echo "${GREEN}Nextcloud is accessible on port 8080.${RESET}"
else
    echo "${RED}Nextcloud did not return a 200 OK on port 8080 (HTTP code: $HTTP_CODE).${RESET}"
    echo "${YELLOW}Attempting to open port 8080 via firewalld...${RESET}"
    sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent
    sudo firewall-cmd --reload
    sleep 5
    HTTP_CODE=$(curl -s -o /dev/null -w '%{http_code}' --connect-timeout 5 http://localhost:8080)
    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "${GREEN}Port 8080 is now accessible after updating firewall rules.${RESET}"
    else
        echo "${RED}Port 8080 is still not accessible (HTTP code: $HTTP_CODE). Please check your network configuration manually.${RESET}"
    fi
fi
echo

########################################
# Create CAN_INSTALL File to Prevent Reinstallation Errors
########################################
echo "${YELLOW}Ensuring CAN_INSTALL file exists in the Nextcloud config directory...${RESET}"
docker exec -u www-data nextcloud_server bash -c 'if [ ! -f /var/www/html/config/CAN_INSTALL ]; then touch /var/www/html/config/CAN_INSTALL; fi'
echo "${GREEN}CAN_INSTALL file ensured.${RESET}"
echo

########################################
# Force Database Configuration to Use MariaDB via PHP
########################################
echo "${YELLOW}Forcing Nextcloud to use MariaDB as the database backend...${RESET}"
php_db=$(cat <<'EOF'
require '/var/www/html/config/config.php';
$CONFIG['dbtype'] = 'mysql';
$CONFIG['dbhost'] = 'db';
$CONFIG['dbport'] = '3306';
$CONFIG['dbname'] = 'nextcloud';
$CONFIG['dbuser'] = 'nextcloud';
$CONFIG['dbpassword'] = 'nextcloud_password';
file_put_contents('/var/www/html/config/config.php', "<?php\n\$CONFIG = " . var_export($CONFIG, true) . ";");
echo "Database configuration forced to use MariaDB.";
EOF
)
docker exec -u www-data nextcloud_server php -r "$php_db"
echo

########################################
# Update Nextcloud Configuration via sed
########################################
echo "${YELLOW}Updating Nextcloud configuration (trusted_domains and overwrite.cli.url)...${RESET}"
if docker exec -u www-data nextcloud_server test -f /var/www/html/config/config.php; then
    docker exec -u www-data nextcloud_server sed -i "#'trusted_domains' => array (# a\    '${SERVER_IP}'," /var/www/html/config/config.php
    docker exec -u www-data nextcloud_server sed -i "s#'overwrite.cli.url' => '.*',#'overwrite.cli.url' => 'http://${SERVER_IP}:8080',#" /var/www/html/config/config.php
    echo "${GREEN}Configuration updated.${RESET}"
else
    echo "${RED}Config file not found. Cannot update configuration.${RESET}"
fi
echo "${GREEN}Restarting Nextcloud container to apply configuration changes...${RESET}"
docker restart nextcloud_server
echo

########################################
# Enable Nextcloud Auto-Start on Boot via systemd
########################################
echo "${YELLOW}Setting up auto-start on boot for Nextcloud Docker Compose...${RESET}"
HOME_DIR=$(eval echo ~$USER)
SERVICE_FILE="/etc/systemd/system/nextcloud-compose.service"
sudo tee "$SERVICE_FILE" > /dev/null <<EOF
[Unit]
Description=Nextcloud Docker Compose Service
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
WorkingDirectory=${HOME_DIR}/nextcloud
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable nextcloud-compose.service
echo "${GREEN}Auto-start service created and enabled.${RESET}"
echo

########################################
# Final Status Report with Dynamic QR Code
########################################
echo "${GREEN}=== Nextcloud Setup Complete ===${RESET}"
echo "Nextcloud is deployed and running on port 8080."
echo "Access it via http://${SERVER_IP}:8080"
echo

TERM_COLS=$(tput cols)
scale=$(( (TERM_COLS - 2) / 21 ))
if [ "$scale" -lt 1 ]; then scale=1; fi
if [ "$scale" -gt 10 ]; then scale=10; fi

echo "${GREEN}Scan the following QR code with your Nextcloud app:${RESET}"
qrencode -t ANSIUTF8 -l H -s "$scale" "http://${SERVER_IP}:8080"
